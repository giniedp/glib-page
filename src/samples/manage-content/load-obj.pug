//- title: Loading OBJ Model
//- weight: 2
extends ./../../_layouts/example
block script
  a(name="HTML" index=3)
  viewcode

  a(name="JS" index=1)
  script(type='text/javascript').
    // # Load OBJ Models
    //
    // Glib is able to load OBJ (.obj) models and also the assosiated material (.mtl) files.
    // However Glib has no built in Effect. When loading the material file, the effect simply is
    // pointing to a 'basicEffect' string. That must be remapped to a url where the desired effect
    // is located.
    //
    // ---

    // Create the graphics device and pass the existing canvas element from the DOM.
    var device = new Glib.Graphics.Device({
      canvas: document.getElementById('canvas')
    });

    // Create the content manager and point 'basicEffect' to an existing effect file
    var content = new Glib.Content.Manager(device);
    content.remapUrl['basicEffect'] = '/assets/shader/basicTextured.glfx'

    // Load the obj model
    var model = null;
    content.load("Model", "/assets/models/ghoul.obj").then(function(result) {
      model = result;
      console.log(model);
    })

    // Allocate some scene variables
    var world = Glib.Math.Mat4.createIdentity();
    var view = Glib.Math.Mat4.createIdentity();
    var proj = Glib.Math.Mat4.createIdentity();
    var cam = Glib.Math.Mat4.createIdentity();

    // Begin the rendering loop and accumulate the time
    var time = 0;
    Glib.utils.loop(function(dt) {
      time += dt;

      // Resize and clear the screen
      device.resize();
      device.cullState = Glib.Graphics.CullState.CullCounterClockWise;
      device.depthState = Glib.Graphics.DepthState.Default;
      device.blendState = Glib.Graphics.BlendState.Opaque;
      device.clear(Glib.Graphics.Color.CornflowerBlue, 1.0);

      // Do not proceed until model is loaded
      if (!model) {
        return
      }

      // Update scene variables
      world.initRotationY(time / 4000);
      world.translation[1] = -50;
      cam.initTranslation(0, 0, 150);
      Glib.Math.Mat4.invert(cam, view);
      proj.initPerspectiveFieldOfView(Math.PI/2, device.drawingBufferAspectRatio, 1, 1000);

      // Assign variables to each material of the model
      model.materials.forEach(function(material) {
        var params = material.parameters

        params.World = world;
        params.View = view;
        params.Projection = proj;
        params.CameraPosition = cam.getTranslation();

        // Add some properties that are not defined in the .mtl file
        params.AlphaClip = 0.9;
        params.AmbientColor = [0.1, 0.1, 0.1];

        // Update light properties
        params.Lights0Color = [1, 1, 1, 1.5];
        params.Lights0Direction = [0, 0, -1, 1];
        params.Lights0Misc = [
          1000, // point light range
          0,
          0,
          1     // 1:dir light 2:point light
        ];
      })

      // Draw the model
      model.draw();
    });
