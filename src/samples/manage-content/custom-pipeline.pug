//- title: Custom pipeline
//- weight: 2
extends ./../../_layouts/example
block script
  a(name="HTML" index=4)
  viewcode
  a(name="MODELS" index=3)
  script(type="text/x-pixels" id="mario.pixels").
    |   11111    |
    |  111111111 |
    |  2223303   |
    | 2323330333 |
    | 23223330333|
    |  233330000 |
    |   333333   |
    |  11411411  |
    | 1114114111 |
    |111144441111|
    |331434434133|
    |333444444333|
    |334444444433|
    |  444  444  |
    | 222    222 |
    |2222    2222|
  script(type="text/x-pixels" id="sonic.pixels").
    |  000000000000   00  |
    | 044444444444400040  |
    |  04440344444444440  |
    |   0440334444444440  |
    |    0403444444444440 |
    |   04444444477744440 |
    |  044444444777774440 |
    | 044444444477770470  |
    |0000004444477770470  |
    |    044444447770 000 |
    |   0444443337777330  |
    |  04444443333333330  |
    | 00000000033333330   |
    |        0300000000   |
    |       030043330000  |
    |      0307703330000  |
    |      0077770330770  |
    |       07777003070   |
    |        077004000    |
    |         004000      |
    |         00401100    |
    |        00110011700  |
    |        011171001110 |
    |        0117111101110|
    |        0000000000000|
  script(type="text/x-pixels" id="megaman.pixels").
    |              000              |
    |            000660             |
    |           04440660            |
    |          0444440000           |
    |          04444406640          |
    |         064444440040          |
    |       00064437774470          |
    |     0066064377003070          |
    |    06666604377003070   0000   |
    |   046666604337773730000444000 |
    |   0444606604300003006604666060|
    |   0444040660333330666604444040|
    |    04404406600000666660444000 |
    |     044440666666600000 0000   |
    |      044066666660             |
    |       0044666660              |
    |        044444440              |
    |       0644444460              |
    |      066644446660             |
    |     04666600666440            |
    |   00444660  044440            |
    | 004444440   0444000           |
    |044444440   044444440          |
    |000000000   000000000          |
  a(name="JS (pipeline)" index=2)
  script(type='text/javascript').
    // The content pipeline is a chain of three main pipeline stages
    //  - load    : This should handle the download of an asset data
    //  - import  : This should handle the parsing of an asset into an intermediate format
    //  - process : This should process the intermediate format into the final instance
    // There must be a handling function for each stage

    // Register a custom load handler for our custom format that targets the "Model" output
    //
    Glib.Content.pipelineLoader([".pixels", "text/x-pixels"], "Model", function(context) {
      // the context has the following attributes
      //    context.manager    -> the content manager instance
      //    context.pipeline   -> the content pipeline instance
      //    context.stage      -> indicates the current pipeline stage one of [preload,load,import,preprocess,process,postprocess]
      //    context.sourceType -> usually the file ending e.g. .json
      //    context.targetType -> name of the targeting instance type that wants to be loaded e.g. Model or Effect etc.
      //    context.options    -> an options object (currently unused)

      //    context.source       -> the url or path of the asset to download
      //    context.downloaded   -> this should be set by the 'load' stage. Its the raw downloaded data
      //    context.imported      -> this should be set by the 'import' stage. It is the imported intermediate format
      //    context.result       -> this should be set by the 'process' stage. That is the final result

      // begin downloading the asset through the manager interface
      return context.manager.download(context.source).then(function(asset) {
        // the raw asset has following attributes
        //  path        -> The source path of the asset
        //  content     -> The downloaded (te t) content
        //  contentType -> The content type (e.g. application/json)
        //   hr         -> The original http request, if asset was downloaded via aja
        context.downloaded = asset
        // continue with the import stage
        return context.pipeline.import(context);
      });
    });

    // Register a custom import handler for our custom format that targets the "Model" output
    //
    Glib.Content.pipelineImporter([".pixels", "text/x-pixels"], "Model", function(context) {
      let colorMap = {
        "0": Glib.Graphics.Color.rgba(0, 0, 0, 255),
        "1": Glib.Graphics.Color.rgba(255, 0, 0, 255),
        "2": Glib.Graphics.Color.rgba(0, 255, 0, 255),
        "3": Glib.Graphics.Color.rgba(255, 255, 0, 255),
        "4": Glib.Graphics.Color.rgba(0, 0, 255, 255),
        "5": Glib.Graphics.Color.rgba(255, 0, 255, 255),
        "6": Glib.Graphics.Color.rgba(0, 255, 255, 255),
        "7": Glib.Graphics.Color.rgba(255, 255, 255, 255)
      }

      var gap = 0.1;

      var builder = new Glib.Graphics.ModelBuilder({ layout: 'PositionNormalColor' });
      var transform = Glib.Math.Mat4.createIdentity()

      let rows = context.downloaded.content.split('\n');
      rows.forEach(function(row, yInde ) {
        let cols = row.trim().split('');
        return cols.forEach(function(col,  Inde ) {
          if (!(col in colorMap)) return
          transform.initTranslation(
             Inde  - cols.length / 2 + 0.5 +  Inde  * gap,
            rows.length - yInde  - rows.length / 2 + 0.5 - yInde  * gap,
            0)
          var tId = builder.beginTransform(transform);
          builder.defaultAttributes.color = colorMap[col];
          builder.append('Cube', { size: 1 })
          builder.endTransform(tId);
        });
      });

      context.imported = builder.endModelOptions({
        materials: [{
          effect: '/assets/shader/basicVColored.glfx',
          parameters: {
            AmbientColor: [0.2, 0.2, 0.2],
            SpecularPower: 0.1
          }
        }]
      });

      // continue with the 'process' stage
      return context.pipeline.process(context);
    });

    // There is no further processor for the custom format needed, since a 'Model' processor does already exist

  a(name="JS" index=1)
  script(type='text/javascript').
    var device = new Glib.Graphics.Device({
      canvas: document.getElementById('canvas')
    });
    var content = new Glib.Content.Manager(device);

    var world = Glib.Math.Mat4.createIdentity();
    var view = Glib.Math.Mat4.createIdentity();
    var proj = Glib.Math.Mat4.createIdentity();
    var cam = Glib.Math.Mat4.createIdentity();
    var model;

    var time = 0;
    Glib.utils.loop(function(dt) {
      time += dt;
      let time2pi = time*2*Math.PI;

      device.resize();
      device.cullState = Glib.Graphics.CullState.CullCounterClockWise;
      device.depthState = Glib.Graphics.DepthState.Default;
      device.blendState = Glib.Graphics.BlendState.Opaque;
      device.clear(Glib.Graphics.Color.CornflowerBlue, 1.0);

      cam.initTranslation(0, 0, 30);
      view.initFrom(cam).invert();
      proj.initPerspectiveFieldOfView(Math.PI/2, device.drawingBufferAspectRatio, 1, 1000);

      if (model) {
        world.initRotationY(time2pi / 5000);

        model.materials.forEach(function(material) {
          var params = material.parameters;

          params.World = world;
          params.View = view;
          params.Projection = proj;
          params.CameraPosition = cam.getTranslation();

          params.Lights0Color = [1, 1, 1, 0.8];
          params.Lights0Position = [0, 0, 500];
          params.Lights0Direction = [0, 0, -1, 1];
          params.Lights0Misc = [
            1000, // point light range
            0,
            0,
            2     // 1:directional 2:point
          ];
        })
        model.draw();
      }
    });

    var assets = ['megaman.pixels', 'sonic.pixels', 'mario.pixels']
    function loadModel(path) {
      content.load("Model", path).then(function(result) {
        model = result;
      });
    }
    loadModel(assets[0]);

    ui(function(gui) {
      var controller = gui.add({ model: assets[0] }, "model", assets);
      controller.onChange(loadModel);
    });
