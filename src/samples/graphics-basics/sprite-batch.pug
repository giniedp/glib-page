//- title: Sprite batch
//- weight: 9
extends ./../../_layouts/example
block script
  a(name="HTML" index=3)
  viewcode
  a(name="JS" index=1)
  script(type='text/javascript').
    // # Sprite Batch
    //
    // ---

    // Create the graphics device and pass the existing canvas element from the DOM.
    var device = new Glib.Graphics.Device({
      canvas: document.getElementById('canvas')
    });

    // Create a sprite batch and several textures that we want to render
    var spriteBatch = device.createSpriteBatch();
    var texture1 = device.createTexture({ data: "/assets/textures/proto_red.png" });
    var texture2 = device.createTexture({ data: "/assets/textures/proto_green.png" });
    var texture3 = device.createTexture({ data: "/assets/textures/proto_blue.png" });
    var texture4 = device.createTexture({ data: "/assets/videos/big-buck-bunny.mp4" });
    // start the playback of the video texture
    texture4.video.play();

    // Begin the render loop and accumulate the time
    var time = 0;
    Glib.utils.loop(function(dt){
      time += dt;
      var pulse = (Math.sin(2 * Math.PI * time / 2000) + 1) / 2;

      // Resize backbuffer and clear the screen
      device.resize();
      device.clear(Glib.Graphics.Color.CornflowerBlue, 1.0);
      // Set blend state to alpha blend. We want one sprite to fade in and out on screen.
      device.blendState = Glib.Graphics.BlendState.NonPremultiplied;

      // Begin the sprite batch. This will prepare the sprite batch to receive
      // sprite instructions. The instructions wont be rendered instantly but only
      // when we call `end`
      spriteBatch.begin();

      var vw = device.viewportState.width
      var pad = vw * 0.025
      var size = vw * 0.3

      // red texture
      spriteBatch
        // Begin drawing a texture.
        // This returns a sprite builder object with chainable methods that allows
        // us to specify more parameters of the sprite.
        .draw(texture1)
        // Set the tint color. This will be multiplied with the texture color.
        // Since we use white here, it actually has no effect on the output.
        .color(0xFFFFFFFF)
        // Set the alpha. This can only be called after `color` is set. Otherwise it would have no effect.
        .alpha(pulse)
        // Set destination rectangle on screen.
        .destination(
          pad,
          pad,
          size,
          size)


      // green texture
      spriteBatch
        // Begin drawing a texture.
        .draw(texture2)
        // Set destination rectangle on screen.
        .destination(
          pad + 1 * (size + pad) - pad * pulse,
          pad - pad * pulse,
          size + 2 * pad * pulse,
          size + 2 * pad * pulse)

      // blue texture
      spriteBatch
        // Begin drawing a texture.
        .draw(texture3)
        // Rotate the sprite
        .rotation(2 * Math.PI * time / 2000)
        // Set the origin of the rotation (in normalized cooridnates).
        .origin(0.5, 0.5)
        // Set destination rectangle on screen.
        .destination(
          pad + 2 * (size + pad),
          pad,
          size,
          size)

      // video split 1
      spriteBatch
        // Begin drawing a texture.
        .draw(texture4)
        // Set the source rectangle. That is the portion of the texture that should be rendered.
        .source(0, 0, texture4.width / 3, texture4.height)
        // Set destination rectangle on screen.
        .destination(
          pad + 0 * (size + pad) + pad * pulse,
          pad + 1 * (size + pad),
          size,
          size)

      // video split 2
      spriteBatch
        // Begin drawing a texture.
        .draw(texture4)
        // Set the source rectangle. That is the portion of the texture that should be rendered.
        .source(texture4.width / 3, 0, texture4.width / 3, texture4.height)
        // Set destination rectangle on screen.
        .destination(
          pad + 1 * (size + pad),
          pad + 1 * (size + pad),
          size,
          size)

      // video split 3
      spriteBatch
        // Begin drawing a texture.
        .draw(texture4)
        // Set the source rectangle. That is the portion of the texture that should be rendered.
        .source(2 * texture4.width / 3, 0, texture4.width / 3, texture4.height)
        // Set destination rectangle on screen.
        .destination(
          pad + 2 * (size + pad) - pad * pulse,
          pad + 1 * (size + pad),
          size,
          size)

      // Call `end` to close the sprite batch. This will finally render everything since the last call to `begin`.
      spriteBatch.end();
    });

