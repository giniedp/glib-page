//- title: Effect (Materials)
//- weight: 10
extends ./../../_layouts/example
block script
  a(name="HTML" index=3)
  viewcode

  a(name="VS" index=2)
  script#vertex-shader(type='text/glsl').
    precision highp float;

    // @binding position
    attribute vec3 vPosition;
    // @binding normal
    attribute vec3 vNormal;
    // @binding texture
    attribute vec2 vTexture;

    // @binding world
    uniform mat4 uWorld;
    // @binding view
    uniform mat4 uView;
    // @binding projection
    uniform mat4 uProjection;

    // data for fragment stage
    varying vec3 normal;
    varying vec3 position;
    varying vec2 texCoord;

    void main(void) {
      vec4 pos = uWorld * vec4(vPosition, 1.0);
      normal = mat3(uWorld) * vNormal;
      position = pos.xyz;
      texCoord = vTexture;
      gl_Position = uProjection * uView * pos;
    }

  a(name="FS" index=2)
  script#fragment-shader(type='text/glsl').
    precision highp float;

    // @binding diffuseColor
    // @default [1, 0, 0]
    uniform vec3 uDiffuseColor;
    // @binding lightColor
    // @default [1, 1, 1]
    uniform vec3 uLightColor;
    // @binding lightDirection
    // @default [0, 0, -1]
    uniform vec3 uLightDirection;
    // @binding eyePosition
    // @default [0, 0, 1]
    uniform vec3 uEyePosition;
    // @binding specularPower
    // @default 0.1
    uniform float uSpecularPower;

    // data from vertex stage
    varying vec3 normal;
    varying vec3 position;
    varying vec2 texCoord;

    vec4 CalculateLightTerm(
      in vec3 E,   // Vector To Eye
      in vec3 N,   // Surface Normal
      in vec3 L,   // Vector To Light
      in float SP) // Specular Power
    {
      // diffuse term

      // float NdotL = max(0.0, dot(N, L));
      float NdotL = max(0.0, abs(dot(N, L))); // abs for backface
      vec4 result = vec4(NdotL, NdotL, NdotL, 0.0);

      // specular term
      if (NdotL > 0.0)
      {
        vec3 H = normalize(E + L);
        result.a = pow(abs(dot(N, H)), exp2(SP * 10.5) );
      }
      return result;
    }

    void main(void) {
      vec4 term = CalculateLightTerm(uEyePosition - position, normal, -uLightDirection, uSpecularPower);
      vec4 color = vec4(0.0);
      color.rgb = uLightColor * (term.rgb * uDiffuseColor.rgb.rgb + term.a);
      color.a = 1.0;
      gl_FragColor = color;
    }

  a(name="JS" index=1)
  script(type='text/javascript').
    // # Effect (Materials)
    //
    // This example demonstrates how to use a shader program to render sevaral
    // objects where each is rendered with different shader parameters.

    // In Glib you can use a `ShaderEffect` for this task. It can hold one or multiple
    // programs and a set of parameters. Before the program is used for rendering,
    // all parameters are committed to that program.
    //
    // Here we will use only one program for the effect. Multi pass effects with
    // multiple programs are explained in another example.
    //
    // ---

    // Create the graphics device and pass the existing canvas element from the DOM.
    var device = new Glib.Graphics.Device({
      canvas: document.getElementById('canvas')
    });

    // Create a shader program with vertex and fragment shaders.
    // Here the shader source code is grabbed from the script tags.
    var program = device.createProgram({
      vertexShader: document.getElementById('vertex-shader').textContent,
      fragmentShader: document.getElementById('fragment-shader').textContent
    });

    // Create the mesh that should be rendered
    var mesh = Glib.Graphics.ModelBuilder.createMesh(device, 'Sphere', { steps: 96, radius: 0.45 });

    // Create several effects.
    // All effects share the same shader program. But each has its own set of parameters.
    var size = 5
    var effects = []
    for (var y = 0; y < size; y++) {
      effects[y] = effects[y] || []
      for (var x = 0; x < size; x++) {
        effects[y][x] = device.createEffect({
          program: program,
          parameters: {
            world: Glib.Math.Mat4.createIdentity(),
            view: Glib.Math.Mat4.createIdentity(),
            projection: Glib.Math.Mat4.createIdentity(),
            specularPower: (x + y * size) / (size * size)
          }
        });
      }
    }

    // Begin the rendering loop
    Glib.utils.loop(function() {

      // Resize and clear the screen
      device.resize();
      device.clear(Glib.Graphics.Color.CornflowerBlue, 1, 1);
      device.cullState = Glib.Graphics.CullState.CullCounterClockWise;

      // Render the mesh for each effect.
      var aspect = device.context.drawingBufferWidth / device.context.drawingBufferHeight;
      for (var y = 0; y < size; y++) {
        for (var x = 0; x < size; x++) {
          var effect = effects[y][x];
          effect.parameters.world.setTranslationXYZ(x - (size - 1) / 2, size - y - (size + 1) / 2, -2);
          effect.parameters.view.initTranslation(0, 0, -2);
          effect.parameters.projection.initPerspectiveFieldOfView(Math.PI/3, aspect, 0, 100);
          effect.draw(mesh);
        }
      }
    });
