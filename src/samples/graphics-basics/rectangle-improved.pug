//- title: Rectangle colored 2
//- weight: 4
extends ./../../_layouts/example
block script
  a(name="HTML" index=3)
  viewcode

  a(name="GLSL" index=2)
  script#vertex-shader(type='text/glsl').
    precision highp float;
    // vertex position attribute
    attribute vec3 vPosition;
    // vertex color attribute
    attribute vec3 vColor;
    // color attribute that will be passed to the fragment shader
    varying vec3 vertexColor;
    void main(void) {
      vertexColor = vColor;
      gl_Position = vec4(vPosition, 1.0);
    }
  script#fragment-shader(type='text/glsl').
    precision highp float;
    // color attribute coming from vertex shader
    varying vec3 vertexColor;
    void main(void) {
      // output pixel color
      gl_FragColor = vec4(vertexColor.rgb, 1.0);
    }

  a(name="JS" index=1)
  script(type='text/javascript').
    // # Improved Index Buffer
    // In the previous example the color attribute of a vertex was made of 3 floats.
    // In this example that attribute is going to be changed into a 4 byte value.
    //
    // ---

    // Create the graphics device and pass the existing canvas element from the DOM.
    var device = new Glib.Graphics.Device({
      canvas: document.getElementById('canvas')
    });

    // Create a shader program with vertex and fragment shaders.
    // Here the shader source code is grabbed from the script tags.
    var program = device.createProgram({
      vertexShader: document.getElementById('vertex-shader').textContent,
      fragmentShader: document.getElementById('fragment-shader').textContent
    });

    // Create the vertex buffer
    var vertices = device.createVertexBuffer({
      layout: {
        // The layout of `vPosition` keeps unchanged
        vPosition: { type: "float", offset: 0, elements: 3  },
        // The `vColor` is now defined as a 4 ubyte element.
        vColor: {
          type: "ubyte",
          offset: 12,
          elements: 4,
          // this indicates that the 4 elements are packed in a single value
          packed: true,
          // this indicates that a byte value should be normalized
          // into [0:1] range before it is utilized in the vertex shader stage
          normalize: true
        }
      },

      // Color values are also changed in the data buffer.
      data: [
        -0.5, -0.5, 0.0,   0xFF0000FF, // The red vertex   (color is packed)
         0.5, -0.5, 0.0,   0xFF00FF00, // The green vertex (color is packed)
        -0.5,  0.5, 0.0,   0xFFFF0000, // The blue vertex  (color is packed)
         0.5,  0.5, 0.0,   0xFFFFFFFF  // The white vertex (color is packed)
      ]
    });

    // Create the index buffer.
    var indices = device.createIndexBuffer({
      type: 'ushort',
      data: [
        0, 1, 2, // the first triangle
        1, 2, 3  // the second triangle
      ]
    });

    Glib.utils.loop(function() {
      // resize (if needed) and clear the screen
      device.resize();
      device.clear(Glib.Graphics.Color.CornflowerBlue);

      // set the drawing state
      device.program = program;
      device.vertexBuffer = vertices;
      device.indexBuffer = indices;
      // and render.
      device.drawIndexedPrimitives('TriangleList', 0, 6);
    })

