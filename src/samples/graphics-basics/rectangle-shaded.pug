//- title: Rectangle shaded
//- weight: 6
extends ./../../_layouts/example
block script
  a(name="HTML" index=4)
  viewcode

  a(name="VS" index=2)
  script#vertex-shader(type='text/glsl').
    precision highp float;

    attribute vec3 vPosition;
    attribute vec3 vNormal;
    attribute vec2 vTexture;

    uniform mat4 uWorld;
    uniform mat4 uView;
    uniform mat4 uProjection;

    // data for fragment stage
    varying vec3 normal;
    varying vec3 position;
    varying vec2 texCoord;

    void main(void) {
      vec4 pos = uWorld * vec4(vPosition, 1.0);
      normal = mat3(uWorld) * vNormal;
      position = pos.xyz;
      texCoord = vTexture;
      gl_Position = uProjection * uView * pos;
    }

  a(name="FS" index=3)
  script#fragment-shader(type='text/glsl').
    precision highp float;
    uniform sampler2D uTexture;
    uniform vec3 uLightColor;
    uniform vec3 uLightDirection;
    uniform vec3 uEyePosition;
    uniform float uSpecularPower;

    // data from vertex stage
    varying vec3 normal;
    varying vec3 position;
    varying vec2 texCoord;

    vec4 CalculateLightTerm(
      in vec3 E,   // Vector To Eye
      in vec3 N,   // Surface Normal
      in vec3 L,   // Vector To Light
      in vec3 LC,  // Light Color
      in float SP) // Specular Power
    {
      // diffuse term

      // float NdotL = max(0.0, dot(N, L));
      float NdotL = max(0.0, abs(dot(N, L))); // abs for backface
      vec4 result = vec4(NdotL * LC, 0.0);

      // specular term
      if (NdotL > 0.0)
      {
        vec3 H = normalize(E + L);
        result.a = pow(abs(dot(N, H)), SP);
      }
      return result;
    }

    void main(void) {
      vec4 term = CalculateLightTerm(uEyePosition - position, normal, -uLightDirection, uLightColor, uSpecularPower);
      vec4 color = texture2D(uTexture, texCoord);
      color.rgb = uLightColor * term.rgb * color.rgb + term.a * color.rgb;
      color.a = 1.0;
      gl_FragColor = color;
    }

  a(name="JS" index=1)
  script(type='text/javascript').
    // # A Shaded Rectangle
    // This example adds a more complex shader to the already textured rectangle.
    // It requires us to keep track of some more variables and pass them to the shader program.
    //
    // ---

    // Create the graphics device and pass the existing canvas element from the DOM.
    var device = new Glib.Graphics.Device({
      canvas: document.getElementById('canvas')
    });

    // Create a shader program with vertex and fragment shaders.
    // Here the shader source code is grabbed from the script tags.
    var program = device.createProgram({
      vertexShader: document.getElementById('vertex-shader').textContent,
      fragmentShader: document.getElementById('fragment-shader').textContent
    });

    // Create the vertex buffer.
    var vertices = device.createVertexBuffer({
      layout: {
        vPosition: { type: "float", offset: 0, elements: 3  },
        vNormal: { type: "float", offset: 12, elements: 3  },
        vTexture: { type: "float", offset: 24, elements: 2  }
      },
      // as the layout already indicates, we add a normal data to each vertex
      data: [
      ///   POSITION      NORMAL  TEXTURE
      /// X     Y    Z    X|Y|Z    U  V
        -0.5, -0.5, 0.0,  0,0,1,   0, 1,
         0.5, -0.5, 0.0,  0,0,1,   1, 1,
        -0.5,  0.5, 0.0,  0,0,1,   0, 0,
         0.5,  0.5, 0.0,  0,0,1,   1, 0
      ]
    });

    // Create the index buffer.
    var indices = device.createIndexBuffer({
      type: 'ushort',
      data: [0, 1, 2, 1, 2, 3]
    });

    // Create a texture object.
    // Simply pass an URL to the image that should be used as a texture.
    var texture = device.createTexture({
      data: '/assets/textures/proto_red.png'
    });

    // Define some variables that will be passed to the shader.
    var world = Glib.Math.Mat4.createIdentity();
    var view = Glib.Math.Mat4.createIdentity();
    var proj = Glib.Math.Mat4.createIdentity();
    var camPosition = Glib.Math.Vec3.create(0, 0, 1)
    var lightDirection = Glib.Math.Vec3.create(0, 0, -1);
    var lightColor = Glib.Math.Vec3.create(1, 1, 1);
    var time = 0;

    // Begin render looop and accumulate the time
    Glib.utils.loop(function(dt) {
      time += dt;

      // resize (if needed) and clear the screen
      device.resize();
      device.clear(Glib.Graphics.Color.CornflowerBlue);

      // rotate the rectangle, place the camera
      // and update projection with the aspect ration of the canvas
      world.initRotationY(time / 1000);
      view.initIdentity().setTranslation(camPosition).invert();
      var aspect = device.context.drawingBufferWidth / device.context.drawingBufferHeight;
      proj.initPerspectiveFieldOfView(Math.PI/2, aspect, 0, 100);

      // pass variables to the shader
      program.setUniform('uTexture', texture);
      program.setUniform('uWorld', world);
      program.setUniform('uView', view);
      program.setUniform('uProjection', proj);

      program.setUniform('uLightColor', lightColor);
      program.setUniform('uLightDirection', lightDirection);
      program.setUniform('uEyePosition', camPosition);
      program.setUniform('uSpecularPower', 16);

      // set drawing state
      device.program = program;
      device.indexBuffer = indices;
      device.vertexBuffer = vertices;
      // and render
      device.drawIndexedPrimitives('TriangleList', 0, 6);
    });
