//- title: Shader Annotations
//- weight: 7
extends ./../../_layouts/example
block script
  a(name="HTML" index=3)
  viewcode

  a(name="VS" index=2)
  script#vertex-shader(type='text/glsl').
    precision highp float;

    // @binding position
    attribute vec3 vPosition;
    // @binding normal
    attribute vec3 vNormal;
    // @binding texture
    attribute vec2 vTexture;

    // @binding world
    uniform mat4 uWorld;
    // @binding view
    uniform mat4 uView;
    // @binding projection
    uniform mat4 uProjection;

    // data for fragment stage
    varying vec3 normal;
    varying vec3 position;
    varying vec2 texCoord;

    void main(void) {
      vec4 pos = uWorld * vec4(vPosition, 1.0);
      normal = mat3(uWorld) * vNormal;
      position = pos.xyz;
      texCoord = vTexture;
      gl_Position = uProjection * uView * pos;
    }

  a(name="FS" index=2)
  script#fragment-shader(type='text/glsl').
    precision highp float;
    // @binding texture
    uniform sampler2D uTexture;
    // @binding ambientColor
    // @default [0.2, 0.2, 0.2]
    uniform vec3 uAmbientColor;
    // @binding lightColor
    // @default [1, 1, 1]
    uniform vec3 uLightColor;
    // @binding lightDirection
    // @default [0, 0, -1]
    uniform vec3 uLightDirection;
    // @binding eyePosition
    // @default [0, 0, 1]
    uniform vec3 uEyePosition;
    // @binding specularPower
    // @default 16
    uniform float uSpecularPower;

    // data from vertex stage
    varying vec3 normal;
    varying vec3 position;
    varying vec2 texCoord;

    vec4 CalculateLightTerm(
      in vec3 E,   // Vector To Eye
      in vec3 N,   // Surface Normal
      in vec3 L,   // Vector To Light
      in vec3 LC,  // Light Color
      in float SP) // Specular Power
    {
      // diffuse term

      // float NdotL = max(0.0, dot(N, L));
      float NdotL = max(0.0, abs(dot(N, L))); // abs for backface
      vec4 result = vec4(NdotL * LC, 0.0);

      // specular term
      if (NdotL > 0.0)
      {
        vec3 H = normalize(E + L);
        result.a = pow(abs(dot(N, H)), SP);
      }
      return result;
    }

    void main(void) {
      vec4 term = CalculateLightTerm(uEyePosition - position, normal, -uLightDirection, uLightColor, uSpecularPower);
      vec4 color = texture2D(uTexture, texCoord);
      color.rgb = uLightColor * term.rgb * color.rgb + term.a * color.rgb + uAmbientColor;
      color.a = 1.0;
      gl_FragColor = color;
    }

  a(name="JS" index=1)
  script(type='text/javascript').
    // # Shader Annotations
    // The GLSL shader attributes may contain annotation comments.
    // The attributes may be given a different binding name (`@binding`)
    // and they may be given a default value (`@default`). The annotations are optional and
    // they are automatically processed when a shader program is created.
    //
    // ---

    // Create the graphics device and pass the existing canvas element from the DOM.
    var device = new Glib.Graphics.Device({
      canvas: document.getElementById('canvas')
    });

    // Create a shader program with vertex and fragment shaders.
    // Here the shader source code is grabbed from the script tags.
    var program = device.createProgram({
      vertexShader: document.getElementById('vertex-shader').textContent,
      fragmentShader: document.getElementById('fragment-shader').textContent
    });

    // Create a texture object.
    // Simply pass an URL to the image that should be used as a texture.
    var texture = device.createTexture({
      data: '/assets/textures/proto_red.png'
    });

    // Create Cube mesh which is going to be rendered
    var mesh = Glib.Graphics.ModelBuilder.begin().append('Cube').endMesh(device);

    // Allocate state variables
    var world = Glib.Math.Mat4.createIdentity();
    var view = Glib.Math.Mat4.createIdentity();
    var proj = Glib.Math.Mat4.createIdentity();
    var time = 0;

    // Begin render looop
    // and accumulate the time
    Glib.utils.loop(function(dt) {
      time += dt;

      // prepare render state
      device.resize();
      device.cullState = Glib.Graphics.CullState.CullCounterClockWise;
      device.clear(Glib.Graphics.Color.CornflowerBlue, 1.0);

      // update the scene
      world.initRotationY(time / 1000);
      view.initTranslation(0, 0, -2);
      var aspect = device.context.drawingBufferWidth / device.context.drawingBufferHeight;
      proj.initPerspectiveFieldOfView(Math.PI/2, aspect, 0, 100);

      // Set shader variables. Mention that not the attribute names are used to set the values.
      // But instead their @binding names.
      program.setUniform('texture', texture);
      program.setUniform('world', world);
      program.setUniform('view', view);
      program.setUniform('projection', proj);

      // Render the mesh
      mesh.draw(program);
    });
