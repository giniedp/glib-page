//- title: Triangle
//- weight: 1
extends ./../../_layouts/example
block script
  a(name="HTML" index=3)
  viewcode

  a(name="GLSL" index=2)
  script#vertex-shader(type='text/glsl').
    // # Vertex shader
    // A minimal vertex shader. It passes the vertex position without any transformation to the fragment stage.
    attribute vec3 vPosition;
    void main(void) {
      gl_Position = vec4(vPosition, 1.0);
    }
  script#fragment-shader(type='text/glsl').
    // # Fragment shader
    // A minimal fragment shader. It simply returns a white pixel.
    void main(void) {
      gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
    }
  a(name="JS" index=1)
  script(type='text/javascript').
    // # Hello Triangle
    //
    // This example shows how to render primitive geometry with the glibs graphics api.
    // The steps can be summarized as follows:
    // 1. Create an instance of `Glib.Graphics.Device`.
    // 1. Create a program with a vertex and a fragment shader.
    // 1. Create a vertex buffer.
    // 1. Use the graphics device to draw the vertex buffer with the program.
    //
    // ---

    // Create the graphics device and pass the existing canvas element from the DOM.
    var device = new Glib.Graphics.Device({
      canvas: document.getElementById('canvas')
    });

    // Create a shader program with vertex and fragment shaders.
    // Here the shader source code is grabbed from the script tags.
    var program = device.createProgram({
      vertexShader: document.getElementById('vertex-shader').textContent,
      fragmentShader: document.getElementById('fragment-shader').textContent
    });

    // Create the vertex buffer. In this example each triangle vertex
    // is defined by a position attribute.
    var vertices = device.createVertexBuffer({
      // The 'layout' describes how the 'data' is structured
      layout: {
        // Our vertex shader expects a vertex attribute with the name
        // 'vPosition' thus the key here is named 'vPosition'
        vPosition: {
          // The vPosition attribute in the shader is declared as
          // vec3. A vec3 is composed of 3 floats.
          type: "float", offset: 0, elements: 3
        }
      },
      // The data is simply a sequence of floats.
      // Each 3 floats define a vertex position
      data: [
        -0.5, -0.5, 0.0, // vertex 1
         0.5, -0.5, 0.0, // vertex 2
         0.0,  0.5, 0.0  // vertex 3
      ]
    });

    // Start a loop function.
    Glib.utils.loop(function() {
      // If the size of the canvas is controlled by css (as it is on this page)
      // this call will resize the drawing buffer to match the new size of the canvas.
      device.resize();

      // Clear the screen.
      device.clear(Glib.Graphics.Color.CornflowerBlue);

      // Now render the vertex buffer with the program.
      // The call to `drawPrimitives` instructs to
      // - draw the vertex buffer as a TriangleList
      // - starting at the beginning of the buffer (`0` offset)
      // - and draw only 3 vertices
      device.vertexBuffer = vertices;
      device.program = program;
      device.drawPrimitives('TriangleList', 0, 3);
    });

