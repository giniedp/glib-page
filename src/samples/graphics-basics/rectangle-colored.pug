//- title: Rectangle colored
//- weight: 3
extends ./../../_layouts/example
block script
  a(name="HTML" index=3)
  viewcode

  a(name="GLSL" index=2)
  script#vertex-shader(type='text/glsl').
    precision highp float;
    // vertex position attribute
    attribute vec3 vPosition;
    // vertex color attribute
    attribute vec3 vColor;
    // color attribute that will be passed to the fragment shader
    varying vec3 vertexColor;
    void main(void) {
      vertexColor = vColor;
      gl_Position = vec4(vPosition, 1.0);
    }
  script#fragment-shader(type='text/glsl').
    precision highp float;
    // color attribute coming from vertex shader
    varying vec3 vertexColor;
    void main(void) {
      // output pixel color
      gl_FragColor = vec4(vertexColor.rgb, 1.0);
    }

  a(name="JS" index=1)
  script(type='text/javascript').
    // # A Colored Rectangle
    // The example is similar to the Colored triangle example.
    // But this time an index buffer is used to define the drawing order of the vertices
    //
    // ---

    // Create the graphics device and pass the existing canvas element from the DOM.
    var device = new Glib.Graphics.Device({
      canvas: document.getElementById('canvas')
    });

    // Create a shader program with vertex and fragment shaders.
    // Here the shader source code is grabbed from the script tags.
    var program = device.createProgram({
      vertexShader: document.getElementById('vertex-shader').textContent,
      fragmentShader: document.getElementById('fragment-shader').textContent
    });

    // Create the vertex buffer. In this example each triangle vertex
    // is defined by a position and a color attribute.
    // The layout is the same as in previous example.
    // The data gets an additional vertex.
    var vertices = device.createVertexBuffer({
      layout: {
        vPosition: { type: "float", offset: 0, elements: 3  },
        vColor: { type: "float", offset: 12, elements: 3 }
      },
      data: [
        -0.5, -0.5, 0.0,   1,  0,  0, // The red vertex
         0.5, -0.5, 0.0,   0,  1,  0, // The green vertex
        -0.5,  0.5, 0.0,   0,  0,  1, // The blue vertex
         0.5,  0.5, 0.0,   1,  1,  1, // The white vertex
      ]
    });

    // Create the index buffer.
    var indices = device.createIndexBuffer({
      type: 'ushort',
      data: [
        0, 1, 2, // the first triangle
        1, 2, 3  // the second triangle
      ]
    });

    Glib.utils.loop(function() {
      device.resize();
      device.clear(Glib.Graphics.Color.CornflowerBlue);

      device.program = program;
      device.vertexBuffer = vertices;

      // Now set the index buffer and then call `drawIndexedPrimitives`.
      // This is similar to 'drawPrimitives' but utilizes the index buffer.
      device.indexBuffer = indices;
      device.drawIndexedPrimitives('TriangleList', 0, 6);
    });
