//- title: Triangle colred
//- weight: 2
extends ./../../_layouts/example
block script
  a(name="HTML" index=3)
  viewcode

  a(name="GLSL" index=2)
  script#vertex-shader(type='text/glsl').
    precision highp float;
    // vertex position attribute
    attribute vec3 vPosition;
    // vertex color attribute
    attribute vec3 vColor;
    // color attribute that will be passed to the fragment shader
    varying vec3 vertexColor;
    void main(void) {
      vertexColor = vColor;
      gl_Position = vec4(vPosition, 1.0);
    }

  script#fragment-shader(type='text/glsl').
    precision highp float;
    // color attribute coming from vertex shader
    varying vec3 vertexColor;
    void main(void) {
      // output pixel color
      gl_FragColor = vec4(vertexColor.rgb, 1.0);
    }
  a(name="JS" index=1)
  script(type='text/javascript').
    //# A Colored Triangle
    //
    // This is exactly the same example as the previous triangle example but shows how to setup the vertex buffer
    // with multiple attributes per vertex. In this case a color attribute is added to each point of the triangle.
    //
    // ---

    // Create the graphics device and pass the existing canvas element from the DOM.
    var device = new Glib.Graphics.Device({
      canvas: document.getElementById('canvas')
    });

    // Create a shader program with vertex and fragment shaders.
    // Here the shader source code is grabbed from the script tags.
    var program = device.createProgram({
      vertexShader: document.getElementById('vertex-shader').textContent,
      fragmentShader: document.getElementById('fragment-shader').textContent
    });

    // Create the vertex buffer. In this example each triangle vertex
    // is defined by a position and a color attribute.
    var vertices = device.createVertexBuffer({
      // The 'layout' describes how the 'data' is structured
      layout: {
        // The position attribute is called `vPosition` in the shader
        // thus the key here is named 'vPosition'
        vPosition: {
          // `vPosition` is declared as vec3 which is composed of 3 floats.
          type: "float", offset: 0, elements: 3
        },
        // The color attribute is called `vColor` in the shader
        // thus the key here is named 'vColor'
        vColor: {
          // `vColor` is declared as vec3 which is composed of 3 floats.
          // But it has an offset of 12 bytes, since it follows
          // right after the position data
          type: "float", offset: 12, elements: 3
        }
      },
      // The data is simply a sequence of floats.
      // Each 6 floats define a vertex
      data: [
        -0.5, -0.5, 0.0,   1,  0,  0, // The red vertex
         0.5, -0.5, 0.0,   0,  1,  0, // The green vertex
         0.0,  0.5, 0.0,   0,  0,  1  // The blue vertex
      ]
    });

    // Start a loop function.
    Glib.utils.loop(function() {
      // If the size of the canvas is controlled by css (as it is on this page)
      // this call will resize the drawing buffer to match the new size of the canvas.
      device.resize();

      // Clear the screen.
      device.clear(Glib.Graphics.Color.CornflowerBlue);

      // Now render the vertex buffer with the program.
      // The call to `drawPrimitives` instructs to
      // - draw the vertex buffer as a TriangleList
      // - starting at the beginning of the buffer (`0` offset)
      // - and draw only 3 vertices
      device.vertexBuffer = vertices;
      device.program = program;
      device.drawPrimitives('TriangleList', 0, 3);
    });
