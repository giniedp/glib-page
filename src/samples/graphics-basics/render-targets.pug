//- title: Render targets
//- weight: 8
extends ./../../_layouts/example
block script
  a(name="HTML" index=3)
  viewcode
  a(name="VS" index=2)
  script#vertex-shader(type='text/glsl').
    precision highp float;

    // @binding position
    attribute vec3 vPosition;
    // @binding texture
    attribute vec2 vTexture;

    // @binding world
    uniform mat4 uWorld;
    // @binding view
    uniform mat4 uView;
    // @binding projection
    uniform mat4 uProjection;

    // data for fragment stage
    varying vec2 texCoord;

    void main(void) {
      vec4 pos = uWorld * vec4(vPosition, 1.0);
      texCoord = vTexture;
      gl_Position = uProjection * uView * pos;
    }

  a(name="FS" index=2)
  script#fragment-shader(type='text/glsl').
    precision highp float;
    // @binding texture
    uniform sampler2D uTexture;
    // data from vertex stage
    varying vec2 texCoord;

    void main(void) {
      gl_FragColor = texture2D(uTexture, texCoord);
    }

  a(name="JS" index=1)
  script(type='text/javascript').
    // # Render Targets
    //
    // ---

    // Create the graphics device and pass the existing canvas element from the DOM.
    var device = new Glib.Graphics.Device({
      canvas: document.getElementById('canvas')
    });

    // Create a shader program with vertex and fragment shaders.
    // Here the shader source code is grabbed from the script tags.
    var program = device.createProgram({
      vertexShader: document.getElementById('vertex-shader').textContent,
      fragmentShader: document.getElementById('fragment-shader').textContent
    });

    // Create meshes which are going to be rendered
    var planeMesh = Glib.Graphics.ModelBuilder.begin().append('Plane', { size: 1 }).endMesh(device);
    var cubeMesh = Glib.Graphics.ModelBuilder.begin().append('Cube', { size: 1 }).endMesh(device);

    // Create a texture and a render target
    var texture = device.createTexture({
      data: '/assets/textures/proto_red.png'
    });
    var renderTarget = device.createRenderTarget({
      width: 512,
      height: 512,
      depthFormat: Glib.Graphics.DepthFormat.DepthStencil
    });

    var world = Glib.Math.Mat4.createIdentity();
    var view = Glib.Math.Mat4.createIdentity();
    var proj = Glib.Math.Mat4.createIdentity();

    // Begin the render loop and accumulate the time
    var time = 0;
    Glib.utils.loop(function(dt) {
      time += dt;

      // Begin rendering to the render target by setting it to the device and clear it
      device.setRenderTarget(renderTarget);
      device.clear(0xFF222222, 1.0);

      // update state variables
      // and pass them to the shader
      world.initRotationX(Math.PI * 0.5);
      world.setTranslationZ(Math.sin(Math.PI * time / 2000) - 1)
      view.initTranslation(0, 0, -1);
      proj.initPerspectiveFieldOfView(Math.PI/2, 1, 0, 100);

      program.setUniform("world", world);
      program.setUniform("view", view);
      program.setUniform("projection", proj);
      program.setUniform("texture", texture);

      // draw the plane with the prepared shader
      planeMesh.draw(program)

      // unset the render target. The render target now holds the image of the plane that we
      // just rendered. The target can now be used as a tecture
      device.setRenderTarget(null);

      // Now continue rendering to the backbuffer. Resize and clear the backbuffer
      device.resize();
      device.clear(Glib.Graphics.Color.CornflowerBlue, 1.0);
      device.cullState = Glib.Graphics.CullState.CullCounterClockWise;

      // update state variables
      // and pass them to the shader
      world.initRotationY(Math.PI * time / 10000);
      view.initTranslation(0, 0, -1);
      proj.initPerspectiveFieldOfView(Math.PI/2, device.drawingBufferAspectRatio, 0, 100);

      program.setUniform("world", world);
      program.setUniform("view", view);
      program.setUniform("projection", proj);
      // here the render target is used as a texture
      program.setUniform("texture", renderTarget);

      // draw the cube with the prepared shader
      cubeMesh.draw(program);
    });
