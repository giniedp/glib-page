//- title: Textures
//- weight: 7
extends ./../../_layouts/example
block script
  a(name="HTML" index=3)
  viewcode

  a(name="VS" index=2)
  script#vertex-shader(type='text/glsl').
    precision highp float;

    // @binding position
    attribute vec3 vPosition;
    // @binding texture
    attribute vec2 vTexture;

    // @binding world
    uniform mat4 uWorld;
    // @binding view
    uniform mat4 uView;
    // @binding projection
    uniform mat4 uProjection;

    // data for fragment stage
    varying vec2 texCoord;

    void main(void) {
      vec4 pos = uWorld * vec4(vPosition, 1.0);
      texCoord = vTexture;
      gl_Position = uProjection * uView * pos;
    }

  a(name="FS" index=2)
  script#fragment-shader(type='text/glsl').
    precision highp float;
    // @binding texture
    uniform sampler2D uTexture;
    // data from vertex stage
    varying vec2 texCoord;

    void main(void) {
      gl_FragColor = texture2D(uTexture, texCoord);
    }

  a(name="JS" index=1)
  script(type='text/javascript').
    // # Textures
    //
    // ---

    // Create the graphics device and pass the existing canvas element from the DOM.
    var device = new Glib.Graphics.Device({
      canvas: document.getElementById('canvas')
    });

    // Create a shader program with vertex and fragment shaders.
    // Here the shader source code is grabbed from the script tags.
    var program = device.createProgram({
      vertexShader: document.getElementById('vertex-shader').textContent,
      fragmentShader: document.getElementById('fragment-shader').textContent
    });

    // Create a mesh which is going to be rendered
    var mesh = Glib.Graphics.ModelBuilder.begin().append('Plane', { size: 1 }).endMesh(device);

    // The easiest way to create a texture is to pass the Image URL as an option to the constructor.
    var texturesFromUrls = []
    texturesFromUrls.push(device.createTexture({ data: '/assets/textures/proto_red.png' }));
    texturesFromUrls.push(device.createTexture({ data: '/assets/textures/proto_green.png' }));
    texturesFromUrls.push(device.createTexture({ data: '/assets/textures/proto_blue.png' }));
    // Video URLs work the same way. The video element is then available on the texture instance
    // behind the `video` property. The video however wont start the playback automatically.
    // Here we iterate over all textures created so far and find those which have a video element.
    texturesFromUrls.push(device.createTexture({ data: '/assets/videos/big-buck-bunny.mp4' }));
    texturesFromUrls.forEach(function(texture) {
      if (!texture.video) {
        return
      }
      // And then add a callback to start the playback when the video is ready to play
      texture.video.oncanplay = function() {
        texture.video.volume = 0;
        texture.video.play();
      }
    });

    // The texture may also be created from an array buffer or plain array. Additionally to the `data`
    // option the `width`, `height`, `pixelFormat` and the `pixelType` must be specified.
    var texturesFromData = [];
    texturesFromData.push(device.createTexture({
      width: 2,
      height: 2,
      pixelFormat: 'RGBA',
      pixelType: 'ubyte',
      data: [
        0xFF, 0x00, 0x00, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0x00, 0x00, 0xFF
      ]
    }));
    texturesFromData.push(device.createTexture({
      width: 2,
      height: 2,
      pixelFormat: 'RGBA',
      pixelType: 'ubyte',
      data: [
        0x00, 0xFF, 0x00, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF,
        0x00, 0xFF, 0x00, 0xFF
      ]
    }));
    texturesFromData.push(device.createTexture({
      width: 2,
      height: 2,
      pixelFormat: 'RGBA',
      pixelType: 'ubyte',
      data: [
        0x00, 0x00, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF,
        0x00, 0x00, 0xFF, 0xFF
      ]
    }));
    texturesFromData.push(device.createTexture({
      width: 2,
      height: 2,
      pixelFormat: 'RGBA',
      pixelType: 'ubyte',
      data: [
        0x00, 0x00, 0x00, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF,
        0x00, 0x00, 0x00, 0xFF
      ]
    }));

    // Prepare some state variables
    var world = Glib.Math.Mat4.createRotationX(Math.PI * 0.5);
    var view = Glib.Math.Mat4.createIdentity();
    var proj = Glib.Math.Mat4.createIdentity();

    // Begin the rendering loop
    Glib.utils.loop(function(dt) {
      // prepare render state
      device.resize();
      device.cullState = Glib.Graphics.CullState.CullCounterClockWise;
      device.clear(Glib.Graphics.Color.CornflowerBlue, 1.0);

      // update view and projection matrices
      var aspect = device.context.drawingBufferWidth / device.context.drawingBufferHeight;
      view.initTranslation(0, 0, -1);
      proj.initPerspectiveFieldOfView(Math.PI/2, aspect, 0, 100);

      // assign state to shader
      program.setUniform('view', view);
      program.setUniform('projection', proj);

      // render the same mesh once for every texture
      var rows = [
        texturesFromUrls,
        texturesFromData
      ];
      for (var i=0; i < rows.length; i++) {
        var cols = rows[i];
        for (var j=0; j < cols.length; j++) {
          var texture = cols[j];

          world.setTranslationXYZ(
            -0.5*cols.length + j + 0.5,
            +0.5*rows.length - i - 0.5,
            -1
          );

          program.setUniform('texture', texture);
          program.setUniform('world', world);

          mesh.draw(program);
        }
      }
    });
