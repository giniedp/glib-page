//- title: Multiview
//- weight: 3
extends ./../../_layouts/example
block script
  a(name="HTML" index=3)
  viewcode

  a(name="JS" index=1)
  script(type='text/javascript').

    var Mat4 = Glib.Math.Mat4;
    var Vec3 = Glib.Math.Vec3;
    var Vec4 = Glib.Math.Vec4;

    Glib.Content.pipelinePreloader('ShaderEffect', function(context) {
      // redirect the download path for basicEffect
      if (context.source === 'basicEffect') {
        context.sourceType = '.glfx'
        context.source = '/assets/shader/basicTextured.glfx'
      }
    });

    var device = new Glib.Graphics.Device({ canvas: document.getElementById('canvas') });
    var content = new Glib.Content.Manager(device);
    var renderer = new Glib.Render.Manager(device);

    var items = [];
    var lights = [{
      color: new Vec4(1, 1, 1, 1),
      position: new Vec4(0, 0, 1000, 0),
      direction: new Vec4(0, 0, -1, 1),
      misc: new Vec4(1000, 0, 0, 1)
    }];
    var steps = [new Glib.Render.StepForward()];

    renderer.addView({
      layout: { x: 0.5, y: 0.5, width: 0.5, height: 0.5 },
      camera: {
        world: Mat4.createLookAt(Vec3.multiplyScalar(Vec3.Right, 50), Vec3.Zero, Vec3.Up),
        view: Mat4.createIdentity(),
        projection: Mat4.createIdentity()
      },
      items: items,
      lights: lights,
      steps: steps
    });
    renderer.addView({
      layout: { x: 0.0, y: 0.5, width: 0.5, height: 0.5 },
      camera: {
        world: Mat4.createLookAt(Vec3.multiplyScalar(Vec3.Left, 50), Vec3.Zero, Vec3.Up),
        view: Mat4.createIdentity(),
        projection: Mat4.createIdentity()
      },
      items: items,
      lights: lights,
      steps: steps
    });
    renderer.addView({
      layout: { x: 0.0, y: 0.0, width: 0.5, height: 0.5 },
      camera: {
        world: Mat4.createLookAt(Vec3.multiplyScalar(Vec3.Backward, 50), Vec3.Zero, Vec3.Up),
        view: Mat4.createIdentity(),
        projection: Mat4.createIdentity()
      },
      items: items,
      lights: lights,
      steps: steps
    });
    renderer.addView({
      layout: { x: 0.5, y: 0.0, width: 0.5, height: 0.5 },
      camera: {
        world: Mat4.createLookAt(Vec3.multiplyScalar(Vec3.Up, 50), Vec3.Zero, Vec3.Forward),
        view: Mat4.createIdentity(),
        projection: Mat4.createIdentity()
      },
      items: items,
      lights: lights,
      steps: steps
    });


    var objects = [];

    var time = 0;
    Glib.utils.loop(function(dt) {
      time += dt;
      updateViews(time, dt);
      updateLights(time, dt);
      renderer.update();
      renderer.render();
    });

    content.load("Model", "/assets/models/Tank6.obj").then(function(model) {
      objects.push(createObject(model));
    });
    content.load("ShaderEffect", "/assets/shader/post/bloom-kawase.glfx").then(function(effect) {
      steps.push(new Glib.Render.Post.BloomKawase(effect));
    });

    function createObject(model) {
      var object = {
        world: Mat4.createIdentity(),
        model: model
      };

      model.meshes.forEach(function(mesh) {
        items.push({
          world: object.world,
          drawable: mesh,
          effect: (model.materials[mesh.materialId] || model.materials[0]),
          data: null
        });
      });

      return object
    }

    function updateViews(time) {
      for (var i = 0; i < renderer.views.length; i++) {
        var view = renderer.views[i];
        var camera = view.camera;
        Mat4.invert(camera.world, camera.view);
        camera.projection.initPerspectiveFieldOfView(Math.PI/2.4, view.width / view.height, 0.1, 100);
      }
    }

    function updateLights(time, dt) {
      var light = lights[0];
      light.direction.x = Math.sin(2 * Math.PI * time/ 10000);
      light.direction.z = Math.cos(2 * Math.PI * time / 10000);
    }


