program:
  precision highp float;
  precision highp int;

  //#define TEXTURE_FLIP_Y
  #define ALPHA_CLIP
  #define DIFFUSE_MAP
  #define GAMMA_CORRECTION

  //#define DEBUG_TEXTURE
  //#define DEBUG_NORMAL

  #include <lib/glib.h>

technique:
  pass:
    vertexShader:
      void main(void) {
        vec4 position = uWorld * vec4(aPosition, 1.0);
        vec3 eyeVector = position.xyz - uCameraPosition;
        vec3 upVector = vec3(0, 1, 0);
        vec3 sideVector = normalize(cross(eyeVector, upVector));

        position.xyz += (aTexture.x - 0.5) * sideVector * 10.0;
        position.xyz += (1.5 - aTexture.y * 1.5) * upVector * 10.0;

        gl_Position = uProjection * uView * position;
        writeTexture();
      }

    fragmentShader:
      void main(void) {
        getDiffuseColor(gl_FragColor);
        #ifdef ALPHA_CLIP
        clipAlpha(gl_FragColor.a);
        #endif
      }
