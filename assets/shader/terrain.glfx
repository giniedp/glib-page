program:
  precision highp float;
  precision highp int;

  #define TEXTURED
  #define TANGENT
  #define TANGENT_TERRAIN
  #define NUM_LIGHTS 1
  #define GAMMA_CORRECTION

  //#define DEBUG_TEXTURE
  //#define DEBUG_NORMAL

  #include <lib/splatting.h>
  #include <lib/glib.h>

technique:
  pass:
    vertexShader:
      void main(void) {
        glibVertexShader();
      }
    fragmentShader:
      void main(void) {
        vec4 splat = texture2D(textureSplat, vTexture.xy).rgba;
        float slope = blendSlope(1.0 - vWorldNormal.y, vTexture.xy * uTiling);
        vec3 color = splatColor(vTexture.xyxy * uTiling, splat, slope).rgb;
        vec3 normal = splatNormal(vTexture.xyxy * uTiling, splat, slope).rbg;
        normal = normalize(mat3(vWorldTangent.xyz, vWorldBitangent.xyz, vWorldNormal.xyz) * normal.xyz);

        SurfaceParams surface;
        surface.Diffuse.xyz = color;
        surface.Normal.xyz = normal;

        getSpecularColor(surface.Specular);
        surface.Specular.rgb *= color.rgb;;
        shadePixel(surface);
      }
